<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int GRID_LENGHT = 5;
const int GRID_HEIGHT = 5;
const int N_EXITS = 2;
const int N_FIRES = 1;
const int N_DRONES = 4;
const int N_CIVILIANS = 4;
const int N_FIRST_RESPONDERS = 1;
const int T_ZR = 3;                      // Time that a Zero Responder needs to help someone
const int T_FR = 3;                      // Time that a First Responder needs to help someone
const int STEP_TIME = 1;                 // Time to step
const int T_V = 5;                       // Time before a civilian is supposed to die

const int MAX_TRAJ = GRID_LENGHT*GRID_HEIGHT/N_DRONES;

// Global types
typedef int [0, N_DRONES-1] bot_t;
typedef struct { int r, c; } pos_t;

// Map constants
const int NONE         =  0;
const int EXIT         =  1;             // Exit
const int FIRE         =  2;             // Fire
const int CIVILIAN     =  3;             // Civilian
const int DRONE        =  4;             // Drone
const int FIRST_R      =  5;             // First Responder
const int DandC        =  6;             // Drone and Civilian on the same cell
const int DandFR       =  7;             // Drone and First Responder on the same cell
const int CIV_BUSY     =  8;             // Civilian and Zero Responder during assistancy

const int MAX_INT =  32767; //from doc

// Channels
urgent broadcast chan init_done;
urgent broadcast chan fr_help_req;
urgent broadcast chan civilian_saved;

// Global variables
int casualties = 0;
int saved = 0;

// Grid layout
int grid[GRID_LENGTH][GRID_HEIGHT] = {{0, 1, 1, 1, 0},
                                      {2, 0, 1, 1, 0},
                                      {2, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0},
                                      {0, 0, 0, 0, 0}};


// Global functions


// Exits, Humans, Drones can have arbitrary positions.
pos_t d_pos1;
d_pos1.r = 1;
d_pos1.c = 1;

pos_t d_pos2;
d_pos2.r = 3;
d_pos2.c = 3;

pos_t c_pos1;
c_pos1.r = 2;
c_pos1.c = 2;

pos_t c_pos2;
c_pos2.r = 4;
c_pos2.c = 2;

const pos_t DRONE_POS[N_DRONES] = {d_pos1, d_pos2};
const pos_t CIVILIANS_POS[N_CIVILIANS] = {c_pos1, c_pos2};

/* GLOBAL UTILITY FUNCTIONS ****************/

/*
 * Get the value of a cell of the map given its pos_t coordinates.
 */
int cell(pos_t p) {
    return grid[p.r][p.c];
}

/*
 * Get the value of a cell of the map given its int coordinates.
 */
int cell_int(int x, int y) {
    return grid[x][y];
}

/*
 * Check whether a cell of the map is occupied by a bot or not.
 */
bool cell_is_free(pos_t p) {
    return cell(p) == FREE;
}

/*
 * Compute distance from two positions in the grid (NO diagonal moves allowed).
 */
int dist(pos_t src, pos_t dest){
    int x_dist = abs(dest.r - src.r);
    int y_dist = abs(dest.c - src.c);
    return x_dist + y_dist;
}

/*
 * Compute max between two integers.
 */ 
int max(int a, int b){
    return a &gt;= b ? a : b;
}


/*
 * Compute distance from two positions in the grid (diagonal moves allowed).
 */
int dist2(pos_t src, pos_t dest){
    int x_dist = abs(dest.r - src.r);
    int y_dist = abs(dest.c - src.c);
    return max(x_dist, y_dist);
}</declaration>
	<template>
		<name>First_Responder</name>
		<parameter>int p_id, pos_t p_pos</parameter>
		<declaration>const int FREE = 0;
const int NEAR_DANGER = 1;
const int CALLED = 2;

clock x;
int id = p_id;
pos_t pos;
int status = FREE;

/*
 * Enter the map at the entry point.
 */
void enter() {
    pos = p_pos;
    //map[pos.r][pos.c] |= B;
}

// TODO calcola il tempo per assistere + arrivare se è stato contatto
int timeToAssist() {
    if (status == NEAR_DANGER) {
        return T_FR;
    } else {
        return T_FR + TIME TO ARRIVE;  // TODO capire come calcolare TIME TO ARRIVE
    }
}

// TODO return true if near a person in danger else false
bool nearCivilianInDanger() {

}

void step() {
    // TODO muovi il first responder
    if (nearCivilianInDanger()) {
        status = NEAR_DANGER;
    }
}

// TODO capire come gestire la precenza tra near danger e la ricezione della richiesta di aiuto</declaration>
		<location id="id0" x="-620" y="-42">
		</location>
		<location id="id1" x="-476" y="-42">
			<name x="-459" y="-34">Moving</name>
		</location>
		<location id="id2" x="263" y="-42">
			<name x="255" y="-76">Helped</name>
		</location>
		<location id="id3" x="0" y="-42">
			<name x="-25" y="-85">Helping</name>
		</location>
		<init ref="id0"/>
		<transition id="id4">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-340" y="-68">FR_help_req? &amp;&amp; helping!</label>
			<label kind="assignment" x="-340" y="-34">x = 0 &amp;&amp; status = CALLED</label>
		</transition>
		<transition id="id5">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-323" y="-195">status == NEAR_DANGER</label>
			<label kind="synchronisation" x="-272" y="-178">helping!</label>
			<label kind="assignment" x="-263" y="-161">x = 0</label>
			<nail x="-238" y="-136"/>
		</transition>
		<transition id="id6">
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-535" y="-178">status == FREE</label>
			<label kind="assignment" x="-501" y="-161">step()</label>
			<nail x="-518" y="-127"/>
			<nail x="-442" y="-127"/>
		</transition>
		<transition id="id7">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="59" y="-68">x &gt;= timeToAssist()</label>
		</transition>
		<transition id="id8">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-263" y="17">saved_by_FR!</label>
			<label kind="assignment" x="-263" y="51">status = FREE</label>
			<nail x="263" y="43"/>
			<nail x="-476" y="43"/>
		</transition>
		<transition id="id9">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-595" y="-59">init_done?</label>
			<label kind="assignment" x="-586" y="-42">enter()</label>
			<nail x="-493" y="-42"/>
		</transition>
	</template>
	<template>
		<name>Civilian</name>
		<parameter>int p_id, pos_t p_pos</parameter>
		<declaration>const int SAVED = 1;
const int DANGER = 2;
const int STEP = 3;
const int ZERO_RESP = 4;
const int ASSISTED = 5;

const int id = p_id;
pos_t pos;
int status = 0;
int timeToAssist = -1;

pos_t getNextCellToGoTo(pos_t &amp;pos1, pos_t &amp;pos2){
    int x_move, y_move;
    if(pos1.r &gt; pos2.r){
        x_move = 1;
    } 
    else if(pos.r = pos.r){
        x_move = 0;   
    }
    else{
        x_move = -1;
    }
    
    if(pos1.c &gt; pos2.c){
        y_move = 1;
    } 
    else if(pos.c = pos.c){
        y_move = 0;   
    }
    else{
        y_move = -1;
    }

    pos_t ret_pos;
    ret_pos.r = pos1.r + x_move;
    ret_pos.c = pos1.c + y_move;
    return ret_pos;
}

void step(){
    pos_t exit = getCloserExit(pos);

    pos_t next_cell = getNextCellToGoTo(pos_t h_pos, pos_t exit);
    
    //TODO: if cell is free !!!
    pos = next_cell;
    // TODO: update status!
}

pos_t getCloserExit(pos_t h_pos){
    int min = MAX_INT;
    closer_exit = exits[0];
    for(int i=0; i &lt; len(exits); i++){
        closer_exit = dist(exits[i], h_pos) &lt; min ? exits[i] : closer_exit;
    }
    computeStatus(pos.r, pos.c);
    return closer_exit;
}

int computeStatus(int x, int y{
     // check Exit
    int i;
    for(i = -1; i &lt; 2; i++){
        for(j = -1; j &lt; 2; j++){
            if(cell_int(px + i, py + j) == EXIT) return SAFE;
        }
    }

    // check Fire 
    int i;
    for(i = -1; i &lt; 2; i++){
        for(j = -1; j &lt; 2; j++){
            if(cell_int(px + i, py + j) == FIRE) return IN_DANGER;
        }
    }
    
    return NORMAL;
}

void computeTimeToAssist() {
    // TODO calcolare il tempo necessario per arrivare alla persona in pericolo
    timeToAssist = ... + ;
}

void casualtyOccurred() {
    // TODO togliere il personaggio dalla mappa
    casualties++;
}

void safeOccurred() {
    // TODO togliere il personaggio dalla mappa
    saved++;
}
/*
 * Enter the map at the entry point.
 */
void enter() {
    pos = p_pos;
    status = computeStatus();
    //map[pos.r][pos.c] |= B;
}</declaration>
		<location id="id10" x="-756" y="-85">
		</location>
		<location id="id11" x="-144" y="-85">
			<name x="-127" y="-110">Danger</name>
			<label kind="invariant" x="-119" y="-93">x&lt;=T_V</label>
		</location>
		<location id="id12" x="-144" y="195">
			<name x="-195" y="195">Safe</name>
		</location>
		<location id="id13" x="-144" y="-255">
			<name x="-221" y="-255">Moving</name>
			<label kind="invariant" x="-255" y="-238">x&lt;=STEP_TIME</label>
			<label kind="comments" x="-646" y="-382">Controllare se il clock viene inizializzato
a zero dallo stato committed</label>
		</location>
		<location id="id14" x="306" y="-255">
			<name x="331" y="-280">Helping</name>
			<label kind="invariant" x="331" y="-255">x&lt;=timeToAssist</label>
		</location>
		<location id="id15" x="-442" y="-85">
			<committed/>
		</location>
		<location id="id16" x="-348" y="59">
			<name x="-357" y="25">Dead</name>
		</location>
		<location id="id17" x="527" y="-433">
			<name x="544" y="-450">Contacting</name>
			<label kind="comments" x="552" y="-408">Capire come gestire il tempo
in cui è nello stato di 
contacting, lo si gestisce 
nel FR o qua?
In caso aggiungere uno stato
di transizione fra
contacting e safe</label>
		</location>
		<location id="id18" x="-144" y="59">
			<name x="-127" y="34">Helped</name>
			<label kind="invariant" x="-119" y="51">x&lt;=T_V</label>
		</location>
		<init ref="id10"/>
		<transition id="id19">
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="guard" x="-272" y="59">x==T_V</label>
			<label kind="synchronisation" x="-280" y="76">civ_dead!</label>
			<label kind="assignment" x="-323" y="93">casualtyOccurred()</label>
		</transition>
		<transition id="id20">
			<source ref="id11"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-102" y="-42">helping?</label>
			<label kind="assignment" x="-136" y="-25">status = ASSISTED</label>
		</transition>
		<transition id="id21">
			<source ref="id17"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="93" y="-552">civ_dead?</label>
			<label kind="assignment" x="119" y="-527">x=0</label>
			<nail x="527" y="-526"/>
			<nail x="-59" y="-526"/>
		</transition>
		<transition id="id22">
			<source ref="id17"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="535" y="68">saved_by_FR?</label>
			<label kind="assignment" x="535" y="93">safeOccurred()</label>
			<nail x="527" y="136"/>
			<nail x="527" y="195"/>
		</transition>
		<transition id="id23">
			<source ref="id13"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="93" y="-458">first_resp?</label>
			<nail x="-34" y="-433"/>
		</transition>
		<transition id="id24">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="127" y="-373">civ_dead?</label>
			<label kind="assignment" x="153" y="-348">x=0</label>
			<nail x="306" y="-348"/>
			<nail x="93" y="-348"/>
		</transition>
		<transition id="id25">
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-17" y="-272">zero_resp? &amp;&amp; helping!</label>
			<label kind="assignment" x="-34" y="-255">x=0, computeTimeToAssist()</label>
		</transition>
		<transition id="id26">
			<source ref="id11"/>
			<target ref="id16"/>
			<label kind="guard" x="-323" y="-42">x==T_V</label>
			<label kind="synchronisation" x="-348" y="-25">civ_dead!</label>
			<label kind="assignment" x="-425" y="-8">casualtyOccurred()</label>
		</transition>
		<transition id="id27">
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="314" y="-34">x==timeToAssist</label>
			<label kind="synchronisation" x="314" y="-8">saved_by_ZR!</label>
			<label kind="assignment" x="314" y="17">safeOccurred()</label>
			<nail x="306" y="195"/>
		</transition>
		<transition id="id28">
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="guard" x="-578" y="34">status == SAVED</label>
			<label kind="assignment" x="-569" y="59">safeOccurred()</label>
			<nail x="-442" y="195"/>
		</transition>
		<transition id="id29">
			<source ref="id15"/>
			<target ref="id11"/>
			<label kind="guard" x="-357" y="-110">status == DANGER</label>
		</transition>
		<transition id="id30">
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="guard" x="-570" y="-238">status == STEP</label>
			<nail x="-442" y="-255"/>
		</transition>
		<transition id="id31">
			<source ref="id10"/>
			<target ref="id15"/>
			<label kind="synchronisation" x="-722" y="-110">init_done?</label>
			<label kind="assignment" x="-722" y="-85">enter()</label>
		</transition>
		<transition id="id32">
			<source ref="id13"/>
			<target ref="id11"/>
			<label kind="guard" x="-289" y="-187">status == DANGER</label>
			<label kind="assignment" x="-229" y="-170">x=0</label>
		</transition>
		<transition id="id33">
			<source ref="id13"/>
			<target ref="id13"/>
			<label kind="guard" x="-255" y="-442">x==STEP_TIME</label>
			<label kind="assignment" x="-263" y="-425">step() &amp;&amp; x=0</label>
			<nail x="-204" y="-340"/>
			<nail x="-204" y="-391"/>
			<nail x="-144" y="-391"/>
			<nail x="-144" y="-331"/>
			<nail x="-144" y="-331"/>
			<nail x="-144" y="-331"/>
		</transition>
		<transition id="id34">
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="93" y="-68">status == SAVED</label>
			<label kind="assignment" x="93" y="-42">safeOccurred()</label>
			<nail x="85" y="-85"/>
			<nail x="85" y="195"/>
		</transition>
		<transition id="id35">
			<source ref="id18"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-136" y="102">saved_by_ZR? ||
saved_by_FR?</label>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<declaration>void build_exits(){
    int count = 0;
    int i;
    int j;
    for(i=0; i &lt; GRID_LENGTH; i++){
        for(j=0; j &lt; GRID_HEIGHT; j++){
            if(cell_int(i, j) == EXIT) count++;
        }
    }

    pos_t exits[count];
    int idx = 0;
    int i;
    int j;
    for(i=0; i &lt; GRID_LENGTH; i++){
        for(j=0; j &lt; GRID_WIDTH; j++){
            if(cell(i, j) == EXIT) exists[idx++] = cell(i, j);
        }
    }
}

void init_all() {
    build_exits();

    int i;
    for(i = 0; i &lt; N_DRONES; i++){
        // init drones;
    }

    for(i = 0; i &lt; N_CIVILIANS; i++){
        // init civilians;
    }
    
    for(i = 0; &lt; N_FIRST_RESPONDERS; i++){
        // init fr
    }

}</declaration>
		<location id="id36" x="-357" y="-76">
			<committed/>
		</location>
		<location id="id37" x="-221" y="-76">
		</location>
		<init ref="id36"/>
		<transition id="id38">
			<source ref="id36"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="-339" y="-93">init_done!</label>
			<label kind="assignment" x="-339" y="-76">init_all()</label>
		</transition>
	</template>
	<template>
		<name x="9" y="9">Drone</name>
		<parameter>int p_id, pos_t p_pos</parameter>
		<declaration>const int STEP = 1;
const int ZERO_R = 2;
const int FIRST_R = 3;

clock clk;
int id = p_id;
pos_t pos;
pos_t trajectory[MAX_TRAJ];

int status = STEP;

/*
 * Enter the map at the entry point.
 */
void enter() {
    pos = p_pos;
    //map[pos.r][pos.c] |= B;
}


// The following two methods should be updated in order to return the exact location of the located entity so that the distance is faster to compute
bool civilianInDangerInRange(){
    int i, j;
    for(i = 0; i &lt; range; i++){
        for(j = 0; j &lt; range; j++){
            if (cell_int(pos.r + i, pos.c + j) == IN_DANGER) return true;
        }
    }
    return false;
}

bool zeroResponderInRange(){
    int i, j;
    for(i = 0; i &lt; range; i++){
        for(j = 0; j &lt; range; j++){
            if (cell_int(pos.r + i, pos.c + j) == CIVILIAN) return true;
        }
    }
    return false;
}

void decisionPolicy() {
    // TODO Decidi se chiamare zero o first CAMBIA STATUS
}

void step() {
    // TODO Muove il drone
    if (civilianInDangerInRange() &amp;&amp; zeroResponderInRange()) {
        decisionPolicy()
    }

}</declaration>
		<location id="id39" x="-1045" y="-76">
		</location>
		<location id="id40" x="-765" y="-76">
			<name x="-850" y="-68">Moving</name>
		</location>
		<location id="id41" x="-765" y="-246">
			<name x="-816" y="-280">ZeroRespFound</name>
			<committed/>
		</location>
		<location id="id42" x="-765" y="94">
			<name x="-824" y="111">FirstRespContact</name>
			<committed/>
		</location>
		<init ref="id39"/>
		<transition id="id43">
			<source ref="id40"/>
			<target ref="id40"/>
			<label kind="guard" x="-663" y="-93">status == STEP</label>
			<label kind="assignment" x="-629" y="-76">step()</label>
			<nail x="-671" y="-110"/>
			<nail x="-671" y="-42"/>
		</transition>
		<transition id="id44">
			<source ref="id40"/>
			<target ref="id42"/>
			<label kind="guard" x="-960" y="0">status == FIRST_R</label>
			<nail x="-807" y="9"/>
		</transition>
		<transition id="id45">
			<source ref="id40"/>
			<target ref="id41"/>
			<label kind="guard" x="-952" y="-178">status == ZERO_R</label>
			<nail x="-807" y="-162"/>
		</transition>
		<transition id="id46">
			<source ref="id42"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-714" y="-8">call_first_resp!</label>
			<label kind="assignment" x="-705" y="8">status = STEP</label>
			<nail x="-722" y="9"/>
		</transition>
		<transition id="id47">
			<source ref="id41"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-714" y="-178">call_zero_resp!</label>
			<label kind="assignment" x="-714" y="-161">status = STEP</label>
			<nail x="-722" y="-162"/>
		</transition>
		<transition id="id48">
			<source ref="id39"/>
			<target ref="id40"/>
			<label kind="synchronisation" x="-1011" y="-93">init_done?</label>
			<label kind="assignment" x="-1003" y="-76">enter()</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
initializer = Initializer();

// List one or more processes to be composed into a system.
system initializer, Drone, Civilian, First_Responder;
</system>
	<queries>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
