<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>typedef struct { int r; int c; } pos_t;
const int GRID_LENGTH = 10;
const int GRID_HEIGHT = 10;
const int N_EXITS = 1;
const int N_FIRES = 7;
const int N_CIVILIANS = 4;
const int N_FIRST_RESPONDERS = 1;
const int N_DRONES = 2;
const int T_ZR = 5;                      // Time that a Zero Responder needs to help someone
const int T_FR = 3;                      // Time that a First Responder needs to help someone
const int T_V = 8;                       // Time before a civilian is supposed to die
const int MAX_TRAJ = 18;                 // Max trajectory length

// Grid layout

const pos_t OUT_OF_MAP = { -1, -1 };
int grid[GRID_LENGTH][GRID_HEIGHT] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {0, 0, 3, 0, 0, 0, 0, 0, 0, 2},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 8, 0, 0, 0, 0, 3},
    {0, 0, 0, 3, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2, 2, 0, 0, 0, 0, 0, 3, 0, 0},
    {2, 2, 2, 0, 0, 0, 0, 0, 0, 0}
};

// Global arrays

pos_t drone_trajectories[N_DRONES][MAX_TRAJ] = {
    {{2, 0}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 7}, {2, 8}, {2, 9}, {2, 8}, {2, 7}, {2, 6}, {2, 5}, {2, 4}, {2, 3}, {2, 2}, {2, 1}},
    {{7, 0}, {7, 1}, {7, 2}, {7, 3}, {7, 4}, {7, 5}, {7, 6}, {7, 7}, {7, 8}, {7, 9}, {7, 8}, {7, 7}, {7, 6}, {7, 5}, {7, 4}, {7, 3}, {7, 2}, {7, 1}}
};
int drone_traj_lengths[N_DRONES] = {18, 18};
int drone_ranges[N_DRONES] = {2, 2};

// DRONE DECISION POLICIES
const int ALWAYS_ZR = 0;      // Always call the zero responder nearby
const int ALWAYS_FR = 1;      // Always call the closer first responder if possible (at least one is free)
const int MIN_TIME = 2;       // Call zr or fr based on their total helping time            

// CIVILIAN/FIRST RESPONDER MOVING POLICY
const int CLOSER_EXIT = 0;
const int RANDOM = 1;
const int FIRES = 2; 

// SET POLICIES
int drone_decision_policy = MIN_TIME;
int fr_movement_policy = FIRES;
int civ_moving_policy = CLOSER_EXIT;

// Global variables
int casualties = 0;
int saved = 0;

// Const for model checking
const int N_perc = 50;                    // (N% = N_save/N_CIVILIANS) percentage of all civilians to reach a safe state
const int T_scs = 7;                     // Time to check properties
clock total_time;

//*************************************************************************************************************************************************************************************************************

// Global types
typedef int [0, N_DRONES-1] dr_t;
typedef int [0, N_FIRST_RESPONDERS-1] fr_t;
typedef int [0, N_CIVILIANS-1] civ_t;

// Map constants
const int OUTSIDE      = -1;             // dead or saved
const int NONE         =  0;             
const int EXIT         =  1;             // Exit
const int FIRE         =  2;             // Fire
const int SURVIVOR     =  3;             // Survivor (civilian not in danger)
const int ZERO_R       =  4;             // Zero Responder 
const int NEED_ASSIST  =  5;             // in danger, Civilian in danger in need for assistance
const int ASSISTED     =  6;             // Civilian assisted
const int CONTACTING   =  7;             // busy Zero responder, survivor busy calling a first responder/waiting for him to rescue someone in danger
const int FIRST_R      =  8;             // First Responder not busy
const int FIRST_R_BUSY_CALLED =  9;      // First Responder busy helping someone called by a survivor
const int FIRST_R_BUSY_NEAR_DANGER =  10;// First Responder busy helping someone near danger

const int MAX_INT =  32767; //from doc


// Channels
broadcast chan init_done;
chan helping[N_CIVILIANS];
urgent chan FR_help_req[N_FIRST_RESPONDERS];
broadcast chan saved_by_FR[N_CIVILIANS];
broadcast chan saved_by_ZR[N_CIVILIANS];
broadcast chan civ_dead[N_CIVILIANS]; 
urgent chan call_zero_resp[N_CIVILIANS];
urgent chan call_first_resp[N_CIVILIANS];

// Global arrays (built by initializer)
pos_t exits[N_EXITS];
pos_t fires[N_FIRES];
pos_t pos_FRs[N_FIRST_RESPONDERS];
pos_t pos_civilians[N_CIVILIANS];

// Exits, Humans, Drones can have arbitrary positions.
const int STEP_TIME = 1;                 // Time to step
pos_t pos_to_save = OUT_OF_MAP;
int caller_id = -1;

/**************** GLOBAL UTILITY FUNCTIONS ****************/

/*
 * Get the value of a cell of the map given its pos_t coordinates.
 */
int cell(pos_t p) {
    if (p.r &gt;= 0 &amp;&amp; p.r &lt; GRID_LENGTH &amp;&amp; p.c &gt;= 0 &amp;&amp; p.c &lt; GRID_HEIGHT){
        return grid[p.r][p.c];
    } else {
        return OUTSIDE;
    }
}

/*
 * Get the value of a cell of the map given its int coordinates.
 */
int cell_int(int x, int y) {
    if (x &gt;= 0 &amp;&amp; x &lt; GRID_LENGTH &amp;&amp; y &gt;= 0 &amp;&amp; y &lt; GRID_HEIGHT){
        return grid[x][y];
    } else {
        return OUTSIDE;
    }
}

/*
 * Compute max between two integers.
 */ 
int max(int a, int b){
    return a &gt;= b ? a : b;
}


/*
 * Compute distance from two positions in the grid (diagonal moves allowed).
 */
int dist(pos_t src, pos_t dest){
    int x_dist = abs(dest.r - src.r);
    int y_dist = abs(dest.c - src.c);
    return max(x_dist, y_dist) - 1;
}

/*
 * Compute distance from two positions in the grid (NO diagonal moves allowed).
 */
/*
int dist_man(pos_t src, pos_t dest){
    int x_dist = abs(dest.r - src.r);
    int y_dist = abs(dest.c - src.c);
    return x_dist + y_dist;
}
*/

/*
 * Move civilian from src to dest in the map (when calling the function cell(src) must be SURVIVOR)
 */ 
void move_civ(pos_t src, pos_t dest){
    grid[src.r][src.c] = NONE;
    grid[dest.r][dest.c] = SURVIVOR;
}

/*
 * Move first responder from src to dest in the map (when calling the function cell(src) must be FIRST_R)
 */ 
void move_fr(pos_t src, pos_t dest){
    grid[src.r][src.c] = NONE;
    grid[dest.r][dest.c] = FIRST_R;
}

/*
 * Retrieve index of a civilian from its position
 */
int get_civ_idx(pos_t pos){
    int i;
    for(i = 0; i &lt; N_CIVILIANS; i++){
        if(pos_civilians[i] == pos) return i;
    }
    return -1;
}

/*
 * Get the next cell to go to reach the objective
 */
pos_t getNextCellToGoTo(pos_t pos1, pos_t pos2){
    int x_move, y_move;
    pos_t ret_pos;
    if(pos1.r &gt; pos2.r){
        y_move = -1;
    } else if(pos1.r == pos2.r){
        y_move = 0; // No vertical movement
    } else{
        y_move = 1;
    }
    
    if(pos1.c &gt; pos2.c){
        x_move = -1;
    } else if(pos1.c == pos2.c){
        x_move = 0; // No horizontal movement
    } else{
        x_move = 1;
    }

    ret_pos.r = pos1.r + y_move;
    ret_pos.c = pos1.c + x_move;

    return ret_pos;
}

/*
 * Check if cell is free
 */
bool isCellFree(pos_t p) {
    if (cell(p) == NONE){
        return true;
    }else{
        return false;
    }
}</declaration>
	<template>
		<name>First_Responder</name>
		<parameter>fr_t p_id</parameter>
		<declaration>const int FINISHED = -1;
const int FREE = 8;
const int CALLED = 9;
const int NEAR_DANGER = 10;

clock x;
int id, k;                           // Id and trajectory index
pos_t pos;                           // Position in the map
pos_t target_fire;                   // Position of the fire where the fr is directed
pos_t trajectory[MAX_TRAJ];          // Trajectory
int traj_l;                          // Trajectory length
int status = FREE;                   // Status
int time_to_assist = -1;             // Time to rescue a civilian       
int civ_id;                          // Id of the civilian rescue
pos_t next = OUT_OF_MAP;


/*
 * Get closer fire
 */
int getCloserFire(pos_t pos){
    int i, min = MAX_INT;
    int closer_fire = -1;
    for(i = 0; i &lt; N_FIRES; i++){
        if(dist(fires[i], pos) &lt; min){
            min = dist(fires[i], pos);
            closer_fire = i;
        }
    }
    return closer_fire;
}


/*
 * Get further fire
 */
int getFurtherFire(pos_t pos){
    int i, max = -1;
    int further_fire = -1;
    for(i = 0; i &lt; N_FIRES; i++){
        if(dist(fires[i], pos) &gt; max){
            max = dist(fires[i], pos);
            further_fire = i;
        }
    }
    return further_fire;
}


/*
 * Check if near a Civilian in danger
 */
bool nearCivilianInDanger() {
    int i, j;
    pos_t civ_pos;
    for (j=-1; j&lt;=1; j++) {
        for (i=-1; i&lt;=1; i++) {
            if (pos.r+i &gt;= 0 &amp;&amp; pos.c+j &gt;= 0 &amp;&amp; pos.r+i &lt; GRID_HEIGHT &amp;&amp; pos.c+j &lt; GRID_LENGTH &amp;&amp; cell_int(pos.r+i, pos.c+j) == NEED_ASSIST){
                civ_pos.r = pos.r+i;
                civ_pos.c = pos.c+j;
                civ_id = get_civ_idx(civ_pos);
                return true;
            }
        }
    }
    return false;
}

/*
 * Enter the map at the entry point.
 */
void enter() {
    id = p_id;
    pos = pos_FRs[id];
    if (nearCivilianInDanger()) {
        status = NEAR_DANGER;
    }
    target_fire = fires[getCloserFire(pos)];
}

/*
 * Calculate total time to assist a civilian in danger
 */
void timeToAssist() {
    if (status == NEAR_DANGER) {
        time_to_assist = T_FR;
    } else {
        time_to_assist = T_FR + dist(pos, pos_civilians[civ_id]) + dist(pos_civilians[caller_id], pos);
    }
}


/*
 * Update global position Array
 */
void update_FR_pos() {
    pos_FRs[id] = pos;
}

/*
 * Return an alternative position wrt to next. This function is used when the next cell to go is occupied
 */
pos_t getAlternativeNext(pos_t next){
    pos_t alt1 = OUT_OF_MAP;
    pos_t neighbors[3][3];
    int i, j;
    for(i = 0; i &lt; 3; i++){
        for(j = 0; j &lt; 3; j++){
            if (pos.r + i - 1&gt;= 0 &amp;&amp; pos.r + i - 1&lt; GRID_HEIGHT &amp;&amp; pos.c + j - 1&gt;= 0 &amp;&amp; pos.c + j - 1&lt; GRID_LENGTH){
                neighbors[i][j].r = pos.r + i - 1; 
                neighbors[i][j].c = pos.c + j - 1; 
            }
                
            else neighbors[i][j] = OUT_OF_MAP;
        }
    }

    for(i = 0; i &lt; 3; i++){
        for(j = 0; j &lt; 3; j++){
            if(neighbors[i][j] != OUT_OF_MAP &amp;&amp; isCellFree(neighbors[i][j]) &amp;&amp; dist(target_fire, neighbors[i][j]) &lt;= (1 + dist(target_fire, next))){
                alt1.r = neighbors[i][j].r;
                alt1.c = neighbors[i][j].c;
            }
        }
    }

    return alt1;
}

/*
 * Calculate next move based on a given policy. Policies implemented are FIRES and RANDOM (not verifiable queries when using random with select on edges).
 * Refer to report for further details.
 */ 
void movementPolicy(){
    int tries = 0;
    bool valid_step_found = false;
     
    int step_dir = 0;
    if(fr_movement_policy == RANDOM){
        
      while (valid_step_found == false &amp;&amp; tries &lt; 8) {
        if (step_dir == 0 &amp;&amp; pos.r+1 &lt; GRID_HEIGHT &amp;&amp; cell_int(pos.r+1, pos.c) == NONE) { // Move down
            grid[pos.r][pos.c] = NONE;
            pos.r++;
            grid[pos.r][pos.c] = FIRST_R;
            valid_step_found = true;
        }
        if (step_dir == 1 &amp;&amp; pos.r-1 &gt;= 0 &amp;&amp; cell_int(pos.r-1, pos.c) == NONE) { // Move up
            grid[pos.r][pos.c] = NONE;
            pos.r--;
            grid[pos.r][pos.c] = FIRST_R;
            valid_step_found = true;
        }
        if (step_dir == 2 &amp;&amp; pos.c-1 &gt;= 0 &amp;&amp; cell_int(pos.r, pos.c-1) == NONE) { // Move left
            grid[pos.r][pos.c] = NONE;
            pos.c--;
            grid[pos.r][pos.c] = FIRST_R;
            valid_step_found = true;
        }
        if (step_dir == 3 &amp;&amp; pos.c+1 &lt; GRID_LENGTH &amp;&amp; cell_int(pos.r, pos.c+1) == NONE) { // Move right
            grid[pos.r][pos.c] = NONE;
            pos.c++;
            grid[pos.r][pos.c] = FIRST_R;
            valid_step_found = true;
        }
        if (step_dir == 4 &amp;&amp; pos.r+1 &lt; GRID_HEIGHT &amp;&amp; pos.c-1 &gt;= 0 &amp;&amp; cell_int(pos.r+1, pos.c-1) == NONE) { // Move down-left
            grid[pos.r][pos.c] = NONE;
            pos.r++;
            pos.c--;
            grid[pos.r][pos.c] = FIRST_R;
            valid_step_found = true;
        }
        if (step_dir == 5 &amp;&amp; pos.r+1 &lt; GRID_HEIGHT &amp;&amp; pos.c+1 &lt; GRID_LENGTH &amp;&amp; cell_int(pos.r+1, pos.c+1) == NONE) { // Move down-right
            grid[pos.r][pos.c] = NONE;
            pos.r++;
            pos.c++;
            grid[pos.r][pos.c] = FIRST_R;
            valid_step_found = true;
        }
        if (step_dir == 6 &amp;&amp; pos.r-1 &gt;= 0 &amp;&amp; pos.c-1 &gt;= 0 &amp;&amp; cell_int(pos.r-1, pos.c-1) == NONE) { // Move up-left
            grid[pos.r][pos.c] = NONE;
            pos.r--;
            pos.c--;
            grid[pos.r][pos.c] = FIRST_R;
            valid_step_found = true;
        }
        if (step_dir == 7 &amp;&amp; pos.r-1 &gt;= 0 &amp;&amp; pos.c+1 &lt; GRID_LENGTH &amp;&amp; cell_int(pos.r-1, pos.c+1) == NONE) { // Move up-right
            grid[pos.r][pos.c] = NONE;
            pos.r--;
            pos.c++;
            grid[pos.r][pos.c] = FIRST_R;
            valid_step_found = true;
        }
        step_dir = (step_dir+1) % 8;
        if (valid_step_found == false) {
            tries++;
        }
        }
    } else if (fr_movement_policy == FIRES){

        if (dist(pos, target_fire) &lt; 1) {
             target_fire = fires[getFurtherFire(pos)]; // change target_fire when arrived close to a fire
        }
        
        next = getNextCellToGoTo(pos, target_fire);

        if(isCellFree(next)){
            grid[pos.r][pos.c] = NONE;
            pos = next;
            grid[pos.r][pos.c] = FIRST_R;
        }
        else{ // case in which next cell is occupied, choose an alternative with the same distance from target_fire
            pos_t alt1 = getAlternativeNext(next);
            if(alt1 != OUT_OF_MAP){
                next = alt1;
                grid[pos.r][pos.c] = NONE;
                pos = next;
                grid[pos.r][pos.c] = FIRST_R;
            }
        }
    }

}

void step() {

    // Check if need to move
    if ((saved+casualties) == N_CIVILIANS) {
        status = FINISHED;
    } else {
        movementPolicy();

        update_FR_pos();

        if (nearCivilianInDanger()) {
            status = NEAR_DANGER;
        }
    }
}


/*
 * Update global grid by setting FR busy or not
 */
void updateGrid() {
    if (grid[pos.r][pos.c] == FIRST_R &amp;&amp; status == NEAR_DANGER) {
        grid[pos.r][pos.c] = FIRST_R_BUSY_NEAR_DANGER;
    } else if (grid[pos.r][pos.c] == FIRST_R &amp;&amp; status == CALLED) {
        grid[pos.r][pos.c] = FIRST_R_BUSY_CALLED;
    } else if (grid[pos.r][pos.c] == FIRST_R_BUSY_NEAR_DANGER || grid[pos.r][pos.c] == FIRST_R_BUSY_CALLED) {
        grid[pos.r][pos.c] = FIRST_R;
    }
}

/*
 * Update when a help request is received
 */
void helpReqReceived() {
    status = CALLED;
    updateGrid();
    civ_id = get_civ_idx(pos_to_save);
    pos_to_save = OUT_OF_MAP;
}

/*
 * Update when starting to help someone near
 */
void nearDanger() {
    x = 0;
    updateGrid();
    timeToAssist();
    pos_to_save = OUT_OF_MAP;
}

/*
 * Update when returning to Moving state
 */
void retToMove() {
    status = FREE;
    x = 0;
    updateGrid();
    time_to_assist = -1;
}</declaration>
		<location id="id0" x="-628" y="-93">
		</location>
		<location id="id1" x="-366" y="68">
			<name x="-433" y="42">Moving</name>
			<label kind="invariant" x="-484" y="76">x&lt;=STEP_TIME</label>
		</location>
		<location id="id2" x="118" y="68">
			<name x="136" y="42">Helping</name>
			<label kind="invariant" x="127" y="76">x&lt;=time_to_assist</label>
		</location>
		<location id="id3" x="-119" y="68">
			<name x="-161" y="34">FR_Received</name>
			<committed/>
		</location>
		<location id="id4" x="-365" y="-93">
			<committed/>
		</location>
		<location id="id5" x="-365" y="-255">
			<name x="-375" y="-289">Finished</name>
		</location>
		<init ref="id0"/>
		<transition id="id6">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-357" y="-187">status == FINISHED</label>
		</transition>
		<transition id="id7">
			<source ref="id4"/>
			<target ref="id1"/>
			<label kind="guard" x="-323" y="-25">status == FREE</label>
			<nail x="-331" y="-17"/>
		</transition>
		<transition id="id8">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-196" y="263">civ_dead[civ_id]?</label>
			<label kind="assignment" x="-170" y="289">retToMove()</label>
			<nail x="118" y="288"/>
			<nail x="-366" y="288"/>
		</transition>
		<transition id="id9">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-60" y="51">helping[civ_id]!</label>
			<label kind="assignment" x="-60" y="68">x=0, 
timeToAssist()</label>
		</transition>
		<transition id="id10">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-298" y="51">FR_help_req[id]?</label>
			<label kind="assignment" x="-306" y="68">helpReqReceived()</label>
		</transition>
		<transition id="id11">
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="guard" x="-102" y="-85">status == NEAR_DANGER</label>
			<label kind="synchronisation" x="-77" y="-68">helping[civ_id]!</label>
			<label kind="assignment" x="-60" y="-51">nearDanger()</label>
			<nail x="119" y="-93"/>
		</transition>
		<transition id="id12">
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="guard" x="-543" y="-25">x == STEP_TIME</label>
			<label kind="assignment" x="-535" y="-8">step(), x=0</label>
			<nail x="-399" y="-17"/>
		</transition>
		<transition id="id13">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-196" y="144">x == time_to_assist</label>
			<label kind="synchronisation" x="-196" y="161">saved_by_FR[civ_id]!</label>
			<label kind="assignment" x="-162" y="186">retToMove()</label>
			<nail x="118" y="186"/>
			<nail x="-366" y="186"/>
		</transition>
		<transition id="id14">
			<source ref="id0"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-552" y="-136">init_done?</label>
			<label kind="assignment" x="-535" y="-119">enter()</label>
		</transition>
	</template>
	<template>
		<name>Civilian</name>
		<parameter>civ_t p_id</parameter>
		<declaration>const int SAVED = -1;
const int DEAD = -1;
const int STEP = 3;
const int ZERO_RESP = 4;
const int DANGER = 5;
const int CIV_ASSISTED = 6;
const int BUSY = 7;

clock x;
int id;                    // Id
pos_t pos;                 // Position
int status = 0;            // Status
int timeToAssist = -1;     // Time to rescue another civilian
int civ_need_id;           // Id of the civilian to help (ZR case)
int fr_id;                 // Id of the FR to call
int delta_r, delta_c;

/*
 * Get closer exit
 */
int getCloserExit(pos_t pos){
    int i, min = MAX_INT;
    int closer_exit = -1;
    for(i=0; i &lt; N_EXITS; i++){
        if(dist(exits[i], pos) &lt; min){
            min = dist(exits[i], pos);
            closer_exit = i;
        }
    }

    return closer_exit;
}

/*
 * Check civilian status
 */
int computeStatus(int px, int py){
     // check Exit
    int i, j;
    for(i = -1; i &lt; 2; i++){
        for(j = -1; j &lt; 2; j++){
            if(cell_int(px + i, py + j) == EXIT) return SAVED;
        }
    }
    // check Fire 
    for(i = -1; i &lt; 2; i++){
        for(j = -1; j &lt; 2; j++){
            if(cell_int(px + i, py + j) == FIRE) return DANGER;
        }
    }
    return STEP;
}

/*
 * Determine next move based on the given policy
 */
void movementPolicy(){
    pos_t next_cell;
    pos_t ret_pos = OUT_OF_MAP;
    pos_t exit_cell = exits[getCloserExit(pos)];

    if (civ_moving_policy == CLOSER_EXIT){

        ret_pos = getNextCellToGoTo(pos, exit_cell);
        next_cell = ret_pos;
    
        // Check if next_cell is free
        if (isCellFree(next_cell)) {
            move_civ(pos, next_cell);
            pos = next_cell;
        }
    }

}

/*
 * Move and update grid
 */ 
void step() {

    movementPolicy();

    status = computeStatus(pos.r, pos.c);
    
    if (status == DANGER) grid[pos.r][pos.c] = NEED_ASSIST;
    
    pos_civilians[id] = pos;
}

/*
 * Compute Zero Responder time needed to assist a civilian in danger
 */
void computeTimeToAssist() {
    // Calculate the time needed to reach the person in danger.
    timeToAssist = dist(pos, pos_to_save) + T_ZR;
}

/*
 * Civilian dies
 */
void casualtyOccurred() {
    grid[pos.r][pos.c] = NONE;
    pos.r = -1;
    pos.c = -1;
    pos_civilians[id] = pos;
    status = DEAD;
    casualties++;
}

/*
 * Civilian is safe
 */
void safeOccurred() {
    grid[pos.r][pos.c] = NONE;
    pos.r = -1;
    pos.c = -1;
    pos_civilians[id] = pos;
    status = SAVED;
    saved++;
}
/*
 * Enter the map at the entry point.
 */
void enter() {
    id = p_id;
    pos.r = pos_civilians[id].r;
    pos.c = pos_civilians[id].c;
    status = computeStatus(pos.r, pos.c);
    if (status == DANGER) grid[pos.r][pos.c] = NEED_ASSIST;
}

/*
 * Get civilian in danger id
 */
void getCivInNeed(){
    civ_need_id = get_civ_idx(pos_to_save);
}

/*
 * Civilian start helping (ZR case)
 */
void zrOccurred(){
    x = 0;
    computeTimeToAssist();
    status = ZERO_RESP;
    grid[pos.r][pos.c] = ZERO_R;
    pos_to_save = OUT_OF_MAP;
}

/*
 * Get closer first responder
 */
int getCloserFR(pos_t pos){
    pos_t fr_pos;
    int i, fr_id = -1, min_dist = MAX_INT;
    for(i = 0; i &lt; N_FIRST_RESPONDERS; i++){
        if(dist(pos, pos_FRs[i]) &lt; min_dist &amp;&amp; grid[pos_FRs[i].r][pos_FRs[i].c] == FIRST_R){
            fr_id = i;
            min_dist = dist(pos, pos_FRs[i]);
        }
    }
    return fr_id;
}

/*
 * Civilian instructed to call FR
 */
void frOccurred(){
    fr_id = getCloserFR(pos);
    civ_need_id = get_civ_idx(pos_to_save);
    status = BUSY;
    grid[pos.r][pos.c] = CONTACTING;
    caller_id = id;
}

/*
 * Civilian gets help
 */
void helpingOccurred(){
    status = CIV_ASSISTED;
    grid[pos.r][pos.c] = ASSISTED;
}

/*
 * Civilian dies before it's saved
 */
void extCasualtyOccurred(){
    x=0;
    status = STEP;
    grid[pos.r][pos.c] = SURVIVOR;
}</declaration>
		<location id="id15" x="-671" y="-68">
		</location>
		<location id="id16" x="-144" y="-68">
			<name x="-127" y="-85">Danger</name>
			<label kind="invariant" x="-127" y="-68">x&lt;=T_V</label>
		</location>
		<location id="id17" x="-144" y="187">
			<name x="-195" y="187">Safe</name>
		</location>
		<location id="id18" x="-144" y="-323">
			<name x="-204" y="-365">Moving</name>
			<label kind="invariant" x="-255" y="-348">x&lt;=STEP_TIME</label>
		</location>
		<location id="id19" x="314" y="-323">
			<name x="339" y="-348">Helping</name>
			<label kind="invariant" x="339" y="-323">x&lt;=timeToAssist</label>
		</location>
		<location id="id20" x="-442" y="-68">
			<committed/>
		</location>
		<location id="id21" x="-348" y="59">
			<name x="-399" y="59">Dead</name>
		</location>
		<location id="id22" x="544" y="-484">
			<name x="561" y="-501">Contacting</name>
		</location>
		<location id="id23" x="-144" y="59">
			<name x="-127" y="42">Helped</name>
			<label kind="invariant" x="-127" y="59">x&lt;=T_V</label>
		</location>
		<location id="id24" x="85" y="-323">
			<name x="34" y="-297">ZR_Received</name>
			<committed/>
		</location>
		<location id="id25" x="306" y="-484">
			<committed/>
		</location>
		<location id="id26" x="-144" y="-187">
			<committed/>
		</location>
		<init ref="id15"/>
		<transition id="id27">
			<source ref="id26"/>
			<target ref="id18"/>
			<label kind="guard" x="-110" y="-263">status == STEP</label>
			<nail x="-119" y="-255"/>
		</transition>
		<transition id="id28">
			<source ref="id25"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="340" y="-510">FR_help_req[fr_id]!</label>
		</transition>
		<transition id="id29">
			<source ref="id23"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-314" y="136">saved_by_FR[id]?</label>
			<label kind="assignment" x="-297" y="153">safeOccurred()</label>
			<nail x="-170" y="127"/>
		</transition>
		<transition id="id30">
			<source ref="id24"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="110" y="-348">helping[civ_need_id]!</label>
			<label kind="assignment" x="136" y="-323">zrOccurred()</label>
		</transition>
		<transition id="id31">
			<source ref="id18"/>
			<target ref="id24"/>
			<label kind="synchronisation" x="-102" y="-340">call_zero_resp[id]?</label>
			<label kind="assignment" x="-85" y="-323">getCivInNeed()</label>
		</transition>
		<transition id="id32">
			<source ref="id23"/>
			<target ref="id21"/>
			<label kind="guard" x="-280" y="59">x==T_V</label>
			<label kind="synchronisation" x="-306" y="76">civ_dead[id]!</label>
			<label kind="assignment" x="-331" y="93">casualtyOccurred()</label>
		</transition>
		<transition id="id33">
			<source ref="id16"/>
			<target ref="id23"/>
			<label kind="synchronisation" x="-102" y="-25">helping[id]?</label>
			<label kind="assignment" x="-127" y="-8">helpingOccurred()</label>
		</transition>
		<transition id="id34">
			<source ref="id22"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="119" y="-603">civ_dead[civ_need_id]?</label>
			<label kind="assignment" x="119" y="-578">extCasualtyOccurred()</label>
			<nail x="544" y="-577"/>
			<nail x="-144" y="-578"/>
		</transition>
		<transition id="id35">
			<source ref="id22"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="552" y="9">saved_by_FR[civ_need_id]?</label>
			<label kind="assignment" x="552" y="34">safeOccurred()</label>
			<nail x="544" y="187"/>
		</transition>
		<transition id="id36">
			<source ref="id18"/>
			<target ref="id25"/>
			<label kind="synchronisation" x="59" y="-510">call_first_resp[id]?</label>
			<label kind="assignment" x="93" y="-484">frOccurred()</label>
			<nail x="-25" y="-484"/>
		</transition>
		<transition id="id37">
			<source ref="id19"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="119" y="-433">civ_dead[civ_need_id]?</label>
			<label kind="assignment" x="119" y="-407">extCasualtyOccurred()</label>
			<nail x="314" y="-407"/>
			<nail x="76" y="-408"/>
		</transition>
		<transition id="id38">
			<source ref="id16"/>
			<target ref="id21"/>
			<label kind="guard" x="-357" y="-42">x==T_V</label>
			<label kind="synchronisation" x="-382" y="-25">civ_dead[id]!</label>
			<label kind="assignment" x="-416" y="-8">casualtyOccurred()</label>
		</transition>
		<transition id="id39">
			<source ref="id19"/>
			<target ref="id17"/>
			<label kind="guard" x="323" y="-17">x==timeToAssist</label>
			<label kind="synchronisation" x="323" y="9">saved_by_ZR[civ_need_id]!</label>
			<label kind="assignment" x="323" y="34">safeOccurred()</label>
			<nail x="315" y="187"/>
		</transition>
		<transition id="id40">
			<source ref="id20"/>
			<target ref="id17"/>
			<label kind="guard" x="-578" y="51">status == SAVED</label>
			<label kind="assignment" x="-569" y="76">safeOccurred()</label>
			<nail x="-442" y="187"/>
		</transition>
		<transition id="id41">
			<source ref="id20"/>
			<target ref="id16"/>
			<label kind="guard" x="-357" y="-93">status == DANGER</label>
		</transition>
		<transition id="id42">
			<source ref="id20"/>
			<target ref="id18"/>
			<label kind="guard" x="-570" y="-306">status == STEP</label>
			<nail x="-442" y="-323"/>
		</transition>
		<transition id="id43">
			<source ref="id15"/>
			<target ref="id20"/>
			<label kind="synchronisation" x="-646" y="-93">init_done?</label>
			<label kind="assignment" x="-646" y="-68">enter()</label>
		</transition>
		<transition id="id44">
			<source ref="id26"/>
			<target ref="id16"/>
			<label kind="guard" x="-136" y="-153">status == DANGER</label>
			<label kind="assignment" x="-85" y="-136">x=0</label>
		</transition>
		<transition id="id45">
			<source ref="id18"/>
			<target ref="id26"/>
			<label kind="guard" x="-306" y="-263">x==STEP_TIME</label>
			<label kind="assignment" x="-340" y="-246">step(), x=0</label>
			<nail x="-170" y="-255"/>
		</transition>
		<transition id="id46">
			<source ref="id26"/>
			<target ref="id17"/>
			<label kind="guard" x="93" y="-17">status == SAVED</label>
			<label kind="assignment" x="93" y="9">safeOccurred()</label>
			<nail x="85" y="-187"/>
			<nail x="85" y="187"/>
		</transition>
		<transition id="id47">
			<source ref="id23"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-110" y="136">saved_by_ZR[id]?</label>
			<label kind="assignment" x="-102" y="153">safeOccurred()</label>
			<nail x="-119" y="127"/>
		</transition>
	</template>
	<template>
		<name>Initializer</name>
		<declaration>/*
 * Build exits global array
 */
void build_exits() {
    int i, j, idx = 0;
    for(i=0; i &lt; GRID_LENGTH; i++){
        for(j=0; j &lt; GRID_HEIGHT; j++){
            if(cell_int(i, j) == EXIT){
                exits[idx].r = i;
                exits[idx].c = j;
                idx++;
            }
        }
    }
}

/*
 * Build fires global array
 */
void build_fires() {
    int i, j, idx = 0;
    for(i=0; i &lt; GRID_LENGTH; i++){
        for(j=0; j &lt; GRID_HEIGHT; j++){
            if(cell_int(i, j) == FIRE){
                fires[idx].r = i;
                fires[idx].c = j;
                idx++;
            }
        }
    }
}

/*
 * Build FRs global array
 */
void set_FR_pos() {
    int i, j, idx = 0;
    for(i=0; i &lt; GRID_LENGTH; i++){
        for(j=0; j &lt; GRID_HEIGHT; j++){
            if(cell_int(i, j) == FIRST_R){
                pos_FRs[idx].r = i;
                pos_FRs[idx].c = j;
                idx++;
            }
        }
    }
}

/*
 * Compute trajectory lenghts
 */
void compute_traj_lengths(){
    int i, j;
    pos_t init_pos, curr_pos;
    for(i = 0; i &lt; N_DRONES; i++){
        init_pos = drone_trajectories[i][0];
        curr_pos = drone_trajectories[i][1];
        for(j = 1; j &lt; MAX_TRAJ; j++){
            if(curr_pos == init_pos){
                drone_traj_lengths[i] = j;
                j = MAX_TRAJ; // break
            } else {
                curr_pos = drone_trajectories[i][j];  
            }
        }
    }
}

/*
 * Build civilians global array
 */
void set_civ_pos(){
    int i, j, idx = 0;
    for(i=0; i &lt; GRID_LENGTH; i++){
        for(j=0; j &lt; GRID_HEIGHT; j++){
            if(cell_int(i, j) == SURVIVOR || cell_int(i, j) == NEED_ASSIST){
                pos_civilians[idx].r = i;
                pos_civilians[idx].c = j;
                idx++;
            }
        }
    }
}

/*
 * Initialize all the global data structures used by the entities
 */
void init_all() {
    build_exits();
    build_fires();
    set_FR_pos();
    set_civ_pos();
    compute_traj_lengths();
}</declaration>
		<location id="id48" x="-357" y="-76">
			<committed/>
		</location>
		<location id="id49" x="-221" y="-76">
		</location>
		<init ref="id48"/>
		<transition id="id50">
			<source ref="id48"/>
			<target ref="id49"/>
			<label kind="synchronisation" x="-339" y="-93">init_done!</label>
			<label kind="assignment" x="-339" y="-76">init_all()</label>
		</transition>
	</template>
	<template>
		<name x="9" y="9">Drone</name>
		<parameter>dr_t p_id</parameter>
		<declaration>const int FINISHED = -1;
const int STEP = 11;
const int DRONE_ZERO_R = 12;
const int DRONE_FIRST_R = 13;

clock x;
int id;                                // Id
pos_t trajectory[MAX_TRAJ];            // Trajectory            
int traj_l;                            // Trajectory Length            
int k;                                 // Trajectory index               
int status = STEP;                     // Status
pos_t pos;                             // Position
int zr;                                // ZeroResponder 
int N_V;                               // Visibility Range

/*
 * Enter the map at the entry point.
 */
void enter() {
    id = p_id;
    trajectory = drone_trajectories[id];
    pos = trajectory[k];
    k = 0;
    traj_l = drone_traj_lengths[id];
    N_V = drone_ranges[id];
}

/*
 * Check if a civilian in danger is in drone sight and return its position
 */
pos_t civilianInDangerInRange(){
    int i, j;
    pos_t ret_pos = {-1, -1};
    for(i = -N_V; i &lt;= N_V; i++){
        for(j = -N_V; j &lt;= N_V; j++){
            pos_t pos = trajectory[k];
            if (cell_int(pos.r + i, pos.c + j) == NEED_ASSIST){
                pos_t ret_pos = {pos.r + i, pos.c + j};
                return ret_pos;
            }
        }
    }
    return ret_pos;
}

/*
 * Check if a zero responder is in drone sight and return its position
 */
pos_t zeroResponderInRange(){
    int i, j;
    pos_t ret_pos = {-1, -1};
    for(i = -N_V; i &lt;= N_V; i++){
        for(j = -N_V; j &lt;= N_V; j++){
            pos_t pos = trajectory[k];
            if (cell_int(pos.r + i, pos.c + j) == SURVIVOR){
                pos_t ret_pos = {pos.r + i, pos.c + j};
                return ret_pos;
            }
        }
    }
    return ret_pos;
}

/*
 * Get closer first responder
 */
pos_t getCloserFR(pos_t pos){
    pos_t fr_pos;
    int i, fr_id = -1, min_dist = MAX_INT;
    for(i = 0; i &lt; N_FIRST_RESPONDERS; i++){
        if(dist(pos, pos_FRs[i]) &lt; min_dist &amp;&amp; grid[pos_FRs[i].r][pos_FRs[i].c] == FIRST_R){
            fr_id = i;
            min_dist = dist(pos, pos_FRs[i]);
        }
    }
    return pos_FRs[fr_id];
}

/*
 * Decide to ask for direct help or to call first responder
 */
void decisionPolicy(pos_t civInDanger, pos_t potentialZr) {
    int dec, i, count = 0;
    pos_t closerFr;
    // Case in which there are no free first responders
    for(i = 0; i &lt; N_FIRST_RESPONDERS; i++){
        if(cell(pos_FRs[i]) == FIRST_R){
            count++;
        }
    }
    if(count == 0){
        dec = 0;

    } // Compute the action based on the given policy
    else if(drone_decision_policy == ALWAYS_ZR){
        dec = 0;
    }
    else if(drone_decision_policy == ALWAYS_FR){
        dec = 1; // from the previous check at least one fr is free
    }
    else if(drone_decision_policy == MIN_TIME){
        closerFr = getCloserFR(civInDanger);
        if((dist(closerFr, civInDanger) + dist(potentialZr, closerFr) + T_FR) &lt;= (dist(potentialZr, civInDanger) + T_ZR)){
            dec = 1;
        }else{
            dec = 0;
        }
    }
    
    // Update status according to the result given by the action following globally-defined policy
    if(dec == 0){
        status = DRONE_ZERO_R;
    } 
    else{
        status = DRONE_FIRST_R;
    }
}

/*
 * Step function that follows a specified trajectory
 */
void step() {
    int i;
    pos_t civ_in_danger, potential_zr;

    // Check if need to move
    if (saved+casualties == N_CIVILIANS) {
        status = FINISHED;
    } else {
        // Do one step along the trajectory
        k = (k + 1) % traj_l;
        pos = trajectory[k];

        // Explore visibility range
        civ_in_danger = civilianInDangerInRange();
        potential_zr = zeroResponderInRange();

        // Find id of the civilian to call (either as a zr either to call a fr)
        zr = get_civ_idx(potential_zr);
        if (civ_in_danger != OUT_OF_MAP &amp;&amp; potential_zr != OUT_OF_MAP) {
            pos_to_save = civ_in_danger;
            decisionPolicy(civ_in_danger, potential_zr);
        }
    }
}
</declaration>
		<location id="id51" x="-1045" y="-76">
		</location>
		<location id="id52" x="-765" y="-76">
			<name x="-833" y="-102">Moving</name>
			<label kind="invariant" x="-884" y="-68">x&lt;=STEP_TIME</label>
		</location>
		<location id="id53" x="-544" y="-76">
			<committed/>
		</location>
		<location id="id54" x="-297" y="-76">
			<name x="-307" y="-110">Finish</name>
		</location>
		<init ref="id51"/>
		<transition id="id55">
			<source ref="id53"/>
			<target ref="id54"/>
			<label kind="guard" x="-501" y="-102">status == FINISHED</label>
		</transition>
		<transition id="id56">
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="guard" x="-747" y="42">status == DRONE_FIRST_R</label>
			<label kind="synchronisation" x="-739" y="59">call_first_resp[zr]!</label>
			<label kind="assignment" x="-713" y="76">status = STEP</label>
			<nail x="-544" y="42"/>
			<nail x="-765" y="42"/>
		</transition>
		<transition id="id57">
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="guard" x="-714" y="-42">status == STEP</label>
			<nail x="-654" y="-42"/>
		</transition>
		<transition id="id58">
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="guard" x="-739" y="-246">status == DRONE_ZERO_R</label>
			<label kind="synchronisation" x="-731" y="-229">call_zero_resp[zr]!</label>
			<label kind="assignment" x="-714" y="-212">status = STEP</label>
			<nail x="-544" y="-85"/>
			<nail x="-544" y="-187"/>
			<nail x="-765" y="-187"/>
		</transition>
		<transition id="id59">
			<source ref="id52"/>
			<target ref="id53"/>
			<label kind="guard" x="-714" y="-153">x == STEP_TIME</label>
			<label kind="assignment" x="-714" y="-136">step(), x = 0</label>
			<nail x="-654" y="-110"/>
		</transition>
		<transition id="id60">
			<source ref="id51"/>
			<target ref="id52"/>
			<label kind="synchronisation" x="-1011" y="-93">init_done?</label>
			<label kind="assignment" x="-1003" y="-76">enter()</label>
		</transition>
	</template>
	<system>//system Initializer, Civilian;

system Initializer, First_Responder, Civilian, Drone;
</system>
	<queries>
		<query>
			<formula/>
			<comment>------- Mandatory Properties -------</comment>
		</query>
		<query>
			<formula>E&lt;&gt; ( (saved * 100 / N_CIVILIANS) &gt;= N_perc and total_time &lt;= T_scs )</formula>
			<comment>Q1: it is possible for a percentage N_save of all civilians to reach a safe state within time T_scs</comment>
			<result outcome="success" type="quality" timestamp="2024-07-13 17:18:45 +0200">
			</result>
		</query>
		<query>
			<formula>A[] ( total_time == T_scs imply (saved * 100 / N_CIVILIANS) &gt;= N_perc )</formula>
			<comment>Q2: a percentage N_save of all civilians is always guaranteed to reach a safe state within time T_scs</comment>
			<result outcome="success" type="quality" timestamp="2024-07-13 17:19:06 +0200">
			</result>
		</query>
		<query>
			<formula/>
			<comment>------- Additional Properties -------</comment>
		</query>
		<query>
			<formula>A[] deadlock imply ( (saved + casualties) == N_CIVILIANS )</formula>
			<comment>System in deadlock only when a scenario is finished (every civilian is either safe or dead)</comment>
			<result outcome="success" type="quality" timestamp="2024-07-13 17:19:59 +0200">
			</result>
		</query>
		<query>
			<formula>A[] ( (sum (i:civ_t) Civilian(i).Danger || Civilian(i).Helped) &gt;= (sum (j:civ_t) Civilian(j).Helping || Civilian(j).ZR_Received) + (sum(k:fr_t) First_Responder(k).FR_Received || First_Responder(k).Helping) ) </formula>
			<comment>Number of civilians in danger always more or equal to number of busy FRs plus number of busy ZRs</comment>
			<result outcome="success" type="quality" timestamp="2024-07-13 17:20:59 +0200">
			</result>
		</query>
		<query>
			<formula>A[] ( (sum (i:civ_t) Civilian(i).Helped) ) == ( (sum (j:civ_t) Civilian(j).Helping) + (sum(k:fr_t) First_Responder(k).Helping) )</formula>
			<comment>Number of civilians in helping state always equal to FR busy + ZR busy</comment>
			<result outcome="success" type="quality" timestamp="2024-07-13 17:21:16 +0200">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; (saved + casualties == N_CIVILIANS)</formula>
			<comment>The scenario will eventually end</comment>
			<result outcome="success" type="quality" timestamp="2024-07-20 18:15:38 +0200">
			</result>
		</query>
	</queries>
</nta>
